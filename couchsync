#! /usr/bin/bash
#
# Usage: couchsync dbdir
#

if [ $# != 1 ]; then
    echo "Usage: couchsync [ <dbdir> | --init ]" >&2
    exit 1
fi

#
# Constants
#
couchurl=http://admin:admin@localhost:5984

#
# Helper functions
#

# Send a GET request
get() {
    urlfrag="$1"
    shift
    curl -s -S -X GET $couchurl/$urlfrag "$@"
}

# Send a PUT request
put() {
    urlfrag="$1"
    shift
    curl -s -S -X PUT $couchurl/$urlfrag "$@" > /dev/null
}

# Send a POST request
post() {
    urlfrag="$1"
    shift
    curl -s -S -X POST $couchurl/$urlfrag "$@" > /dev/null
}

# Replicate from a database to another one
replicate() {
    post _replicate \
	--data "{\"source\":\"$1\",\"target\":\"$2\",\"filter\":\"common/to-replicate\"}" \
	-H "Content-Type: application/json"
}

# Send a message
message() {
    post steenwerck100km/_design/bib_input/_update/force-update/status \
	--data-urlencode "json={\"type\":\"status\",\"scope\":\"local\",\"message\":\"$1\"}" \
	-H "Content-Type: application/x-www-form-urlencoded"
}

step() {
    message "Ne pas enlever la clé USB - $1"
}

getdbkey() {
    echo $(get steenwerck100km/_design/common/_show/couchsync/couchsync)
}

#
# Main program
#

if [ x"$1" == x--init ]; then
  echo 'Put the following content into a "steenwerck" file in the root of an *EMPTY* USB key'
  echo
  getdbkey
  echo
  echo 'Once again: the key MUST be clean!'
  exit 0
fi

dbdir="$1"

# Remember current directory
prevdir=$(pwd)

# Wait until a USB key appears, mounted under /media with a steenwerck file.
while test ! -f /media/*/steenwerck; do
    sleep 1
done

# Go into the USB key to block a possible umount.
usbkeydir=$(dirname /media/*/steenwerck)
cd "$usbkeydir"

# Check the credentials on the key against the ones in the database
step "Vérification de la validité de la clé USB"
if [ x"$(getdbkey)" = x"$(cat steenwerck)" ]; then

# Choose a unique name for the database.
backupdb=backup-$$-$(date +%s)

# If the backup already exists on the USB key, copy it in place, otherwise
# create the database.
step "copie initiale"
if test -f backup.couch; then
    cp backup.couch "$dbdir"/$backupdb.couch
else
    put $backupdb
fi

# Launch the replication in both directions, starting from the database to
# the backup to make sure the filter is copied as well. Also, compact as
# soon as the first synchronisation is over.
step "synchronisation 1/2"
replicate steenwerck100km $backupdb
step "synchronisation 2/2"
replicate $backupdb steenwerck100km

# Give some time to the compaction.
step "compaction de la sauvegarde"
post $backupdb/_compact -H "Content-Type: application/json"
sleep 5

# Wait until the replicate is flushed to disk by asking CouchDB to sync.
step "écriture sur disque"
post $backupdb/_ensure_full_commit -H "Content-Type: application/json"

# Copy the temporary database to the USB key and remove it from the filesystem.
step "recopie sur la clé"
mv "$dbdir"/$backupdb.couch backup.couch

endmsg="La clé USB peut être retirée"

else

endmsg="Authentification invalide - retirer la clé USB"
fi

# Leave USB key directory and umount it.
cd "$prevdir"
umount "$usbkeydir"
message "$endmsg"
sleep 3
message ""

# Restart the program
exec $0 "$@"
